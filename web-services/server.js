var restify = require('restify');
var mongojs = require('mongojs');
var ObjectId = mongojs.ObjectId;

//Read configuration. It contains sensitive connection information
var fs = require('fs');
var config = JSON.parse(fs.readFileSync('config.json', 'utf8'));
//Open the database
var db = mongojs(config.mongodbUri, config.requiredCollections);

var server = restify.createServer();
server.use(restify.acceptParser(server.acceptable));
server.use(restify.queryParser());
server.use(restify.bodyParser());

server.listen(3000, function () {
    console.log("Server started @ 3000");
});

var responseHeader = {
    'Access-Control-Allow-Origin': config.accessControlAllowOrigin,
        'Content-Type': 'application/json; charset=utf-8'
}

//-------------------Start Users---------------------------------
server.get(
    '/users',
    function (req, res, next) {
        db.users.find(function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);

server.get(
    '/user/:userName',
    function (req, res, next) {
        db.users.findOne({ userName: req.params.userName }, function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);

server.post(
    '/user',
    function (req, res, next) {
        var user = req.params;
        db.users.save(user, function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);

server.put(
    '/user/:id',
    function (req, res, next) {
        // get the existing user
        db.users.findOne(
            { _id: ObjectId(req.params.id) },
            function (err, data) {
                // merge req.params/user with the server/user
 
                var updUser = {}; // updated products
                // logic similar to jQuery.extend(); to merge 2 objects.
                for (var n in data) {
                    updUser[n] = data[n];
                }
                for (var n in req.params) {
                    updUser[n] = req.params[n];
                }
                db.users.update({id: req.params.id}, updUser, {multi: false}, function (err, data) {
                    res.writeHead(200, responseHeader);
                    res.end(JSON.stringify(data));
                });
            });
        return next();
    }
);
//----------------------------End Users------------------------------------------


//---------------------------Start Servers---------------------------------------


// Get Control servers owned by an admin user
server.get(
    '/servers/:ownerUserId',
    function (req, res, next) {
        db.servers.find( {'owner.id': req.params.ownerUserId}, function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);
// never been tested
server.get(
    '/server/:id',
    function (req, res, next) {
        db.servers.findOne( { _id: ObjectId(req.params.id) }, function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);
// Note use of ObjectId (see var declaration above). Strangley the form used above to get Control Servers for an admin user
// does not work for _id fields generated by Mongo. Seems to me that: {'_id.$oid': req.params.id} should work just as well as
//  {'owner.id': req.params.ownerUserId} does above but it doesn't.  Documentation on mongojs is non-existent.
server.del(
    '/server/:id',
    function (req, res, next) {
        console.log( req.params.id);
        db.servers.remove({ _id: ObjectId(req.params.id) },
        function (err) {
            if (err) {
                // need a response code for failure. Have not explored what errors get returned bu mongodb.
                // documentation not helpful.
                console.log("delete failed");
            } else {
                res.writeHead(200, responseHeader);
                res.end(JSON.stringify(true));
            }
        });
    return next();
    }
);


server.post('/server',
    function (req, res, next) {
        var server = req.params;
        db.servers.save(server, function (err, data) {
            res.writeHead(200, responseHeader);
            // returns the object just posted complete with Mongo generated objectId
            res.end(JSON.stringify(data));
        });
        return next();
    }
);
//never been tested
server.put(
    '/server/:id',
    function (req, res, next) {
        // get the existing product
        db.servers.findOne({_id: req.params.id},
            function (err, data) {
                // merge req.params/user with the server/user
 
                var updServer = {}; // updated products
                // logic similar to jQuery.extend(); to merge 2 objects.
                for (var n in data) {
                    updServer[n] = data[n];
                }
                for (var n in req.params) {
                    updServer[n] = req.params[n];
                }
                db.servers.update({id: req.params.id}, updServer, {multi: false}, function (err, data) {
                    res.writeHead(200, responseHeader);
                    res.end(JSON.stringify(data));
                });
            }
        );
        return next();
    }
);

//----------------------------End Servers------------------------------------


//---------------------------Start events---------------------------------------



server.get(
    '/events/:supervisorId',
    function (req, res, next) {
        db.events.find({'supervisor.id': req.params.supervisorId}, function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);

server.get(
    '/event/:id',
    function (req, res, next) {
        db.events.findOne({ _id: ObjectId(req.params.id) }, function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);

server.post('/event',
    function (req, res, next) {
        var event = req.params;
        db.events.save(event, function (err, data) {
            res.writeHead(200, responseHeader);
            res.end(JSON.stringify(data));
        });
        return next();
    }
);

server.put(
    '/event/:id',
    function (req, res, next) {
        // get the existing product
        db.events.findOne({ _id: ObjectId(req.params.id) },
            function (err, data) {
                // merge req.params/user with the server/event
 
                var updEvent = {}; // updated products
                // logic similar to jQuery.extend(); to merge 2 objects.
                for (var n in data) {
                    updEvent[n] = data[n];
                }
                for (var n in req.params) {
                    updEvent[n] = req.params[n];
                }
                db.events.update({id: req.params.id}, updEvent, {multi: false}, function (err, data) {
                    res.writeHead(200, responseHeader);
                    res.end(JSON.stringify(data));
                });
            }
        );
        return next();
    }
);

//----------------------------End events
